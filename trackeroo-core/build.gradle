plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

android {
    namespace 'ru.roansa.trackeroo_core'
    compileSdk 32

    defaultConfig {
        minSdk 21
        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
}

/**
 * Publishing block
 */

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

project.afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                artifact(sourceJar) // optional sources
            }
        }
    }
//    publishToMavenLocal {
//        publishing {
//            publications {
//                LibraryRelease(MavenPublication) {
//                    from components.release
//                    artifact(sourceJar)
//                    setGroupId "ru.roansa.trackeroo"
//                    setArtifactId "trackeroo-core"
//                    version "0.1.1-alpha"
//                }
//            }
//            publications.all {
//                pom.withXml {
//                    final dependenciesNode = asNode().appendNode("dependencies")
//
//                    ext.addDependency = {
//                        Dependency dep, String scope ->
//                            if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
//                                return // invalid dependencies should be ignored
//
//                            final dependencyNode = dependenciesNode.appendNode('dependency')
//                            dependencyNode.appendNode('artifactId', dep.name)
//                            dependencyNode.appendNode('groupId', dep.group)
//                            dependencyNode.appendNode('version', dep.version)
//                            System.println("${dep.group} ${dep.name} ${dep.version}")
//
//                            dependencyNode.appendNode('scope', scope)
//                            // Some dependencies may have types, such as aar, that should be mentioned in the POM file
//                            def artifactsList = dep.properties['artifacts']
//                            if (artifactsList != null && artifactsList.size() > 0) {
//                                final artifact = artifactsList[0]
//                                dependencyNode.appendNode('type', artifact.getType())
//                            }
//
//                            if (!dep.transitive) {
//                                // In case of non transitive dependency, all its dependencies should be force excluded from them POM file
//                                final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
//                                exclusionNode.appendNode('groupId', '*')
//                                exclusionNode.appendNode('artifactId', '*')
//                            } else if (!dep.properties.excludeRules.empty) {
//                                // For transitive with exclusions, all exclude rules should be added to the POM file
//                                final exclusions = dependencyNode.appendNode('exclusions')
//                                dep.properties.excludeRules.each { ExcludeRule rule ->
//                                    final exclusionNode = exclusions.appendNode('exclusion')
//                                    exclusionNode.appendNode('groupId', rule.group ?: '*')
//                                    exclusionNode.appendNode('artifactId', rule.module ?: '*')
//                                }
//                            }
//                    }
//
//                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
//                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
//                }
//            }
//        }
//    }
}

//task cleanBuildPublishLocal(type: GradleBuild) {
//    tasks = ['clean', 'build', 'publishToMavenLocal']
//}
//
//task cleanBuildPublish(type: GradleBuild) {
//    tasks = ['clean', 'build', 'publish']
//}